<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Socket on 虞双齐的博客</title>
    <link>https://yushuangqi.com/tags/socket.html</link>
    <description>Recent content in Socket on 虞双齐的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>ysqi@yushuangqi.com (虞双齐)</managingEditor>
    <webMaster>ysqi@yushuangqi.com (虞双齐)</webMaster>
    <copyright>虞双齐 | &lt;a href=&#39;https://beian.miit.gov.cn/&#39;&gt;粤ICP备14032560号&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 31 Dec 2016 11:33:36 +0800</lastBuildDate>
    
	<atom:link href="https://yushuangqi.com/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang服务器的网络层实现</title>
      <link>https://yushuangqi.com/blog/2016/golangfu-wu-qi-de-wang-lao-ceng-shi-xian.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:36 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golangfu-wu-qi-de-wang-lao-ceng-shi-xian.html</guid>
      <description>原文：Golang服务器的网络层实现 由于最近有接触到一些长连接的服务器实现，对网络模型有所学习。对基于C/C++的网络模型实现和基于GoLa</description>
    </item>
    
    <item>
      <title>Golangtransferfilewithsocket</title>
      <link>https://yushuangqi.com/blog/2016/golang-transfer-file-with-socket.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:24 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-transfer-file-with-socket.html</guid>
      <description>https://segmentfault.com/a/ package main import ( &amp;quot;bufio&amp;quot; &amp;quot;code.google.com/p/mahonia&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; &amp;quot;net&amp;quot; &amp;quot;os&amp;quot; ) func main() { fmt.Println(&amp;quot;create a server or client?&amp;quot;) reader := bufio.NewReader(os.Stdin) input, _, _ := reader.ReadLine() if string(input) == &amp;quot;server&amp;quot; { Server() } if string(input) == &amp;quot;client&amp;quot; { Client() } else { fmt.Println(Show(&amp;quot;err arguments,entering again!.\r\n alternaltive argument is server or client&amp;quot;)) os.Exit(0) } } func Show(s string) string { enc := mahonia.NewEncoder(&amp;quot;gbk&amp;quot;) //中文转码</description>
    </item>
    
    <item>
      <title>通过拆分多帧的方式WebSocket发送图片</title>
      <link>https://yushuangqi.com/blog/2016/tong-guo-ca-fen-duo-zhen-de-fang-shi-websocketfa-song-tu-pian.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:24 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/tong-guo-ca-fen-duo-zhen-de-fang-shi-websocketfa-song-tu-pian.html</guid>
      <description>https://segmentfault.com/a/
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;golang.org/x/net/websocket&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ) var ( dirPath string test byte lenFile int ) func check(e error) { if e != nil { panic(e) } } func ChatServer(ws *websocket.Conn) { defer ws.Close() var test []byte var payload []byte for { err := websocket.Message.Receive(ws, &amp;amp;payload) if err != nil { log.Println(err) } fmt.Println(&amp;quot;Payload: &amp;quot;, len(payload)) test = append(test, payload...) fmt.Println(&amp;quot;Test: &amp;quot;, len(test)) fo, err := os.</description>
    </item>
    
  </channel>
</rss>