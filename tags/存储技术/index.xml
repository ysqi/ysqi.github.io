<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>存储技术 on 虞双齐的博客</title>
    <link>https://yushuangqi.com/tags/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF.html</link>
    <description>Recent content in 存储技术 on 虞双齐的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>ysqi@yushuangqi.com (虞双齐)</managingEditor>
    <webMaster>ysqi@yushuangqi.com (虞双齐)</webMaster>
    <copyright>虞双齐 | &lt;a href=&#39;https://beian.miit.gov.cn/&#39;&gt;粤ICP备14032560号&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 31 Dec 2016 11:33:23 +0800</lastBuildDate>
    
	<atom:link href="https://yushuangqi.com/tags/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang读取切分存储byte流文件</title>
      <link>https://yushuangqi.com/blog/2016/golang-dou-qu-qie-fen-cun-chu-byteliu-wen-jian.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:23 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-dou-qu-qie-fen-cun-chu-byteliu-wen-jian.html</guid>
      <description>https://segmentfault.com/a/
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ) func check(e error) { if e != nil { panic(e) } } func cat(f *os.File) []byte { var payload []byte for { buf := make([]byte, 1024) switch nr, err := f.Read(buf[:]); true { case nr &amp;lt; 0: fmt.Fprintf(os.Stderr, &amp;quot;cat: error reading: %s\n&amp;quot;, err.Error()) os.Exit(1) case nr == 0: // EOF return payload case nr &amp;gt; 0: payload = append(payload, buf...) } } } func main() { file, err := os.</description>
    </item>
    
  </channel>
</rss>