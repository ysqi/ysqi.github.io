<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grpc on 虞双齐的博客</title>
    <link>https://yushuangqi.com/tags/grpc.html</link>
    <description>Recent content in Grpc on 虞双齐的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>ysqi@yushuangqi.com (虞双齐)</managingEditor>
    <webMaster>ysqi@yushuangqi.com (虞双齐)</webMaster>
    <copyright>虞双齐 | &lt;a href=&#39;https://beian.miit.gov.cn/&#39;&gt;粤ICP备14032560号&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 24 May 2017 09:17:36 +0800</lastBuildDate>
    
	<atom:link href="https://yushuangqi.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gRPC服务发现&amp;amp;负载均衡</title>
      <link>https://yushuangqi.com/blog/2017/grpcfu-wu-fa-xian-ampampfu-zai-jun-heng.html</link>
      <pubDate>Wed, 24 May 2017 09:17:36 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2017/grpcfu-wu-fa-xian-ampampfu-zai-jun-heng.html</guid>
      <description>gRPC服务发现&amp;amp;负载均衡 构建高可用、高性能的通信服务，通常采用服务注册与发现、负载均衡和容错处理等机制实现。根据负载均衡实现所在的</description>
    </item>
    
    <item>
      <title>go用slice模拟vector功能</title>
      <link>https://yushuangqi.com/blog/2017/go-yong-slicemo-ni-vectorgong-neng.html</link>
      <pubDate>Sat, 18 Feb 2017 11:13:46 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2017/go-yong-slicemo-ni-vectorgong-neng.html</guid>
      <description>appendVector ``` - 编程语言与开发 a = append(a, b&amp;hellip;) copy ==== ``` - 编程语言与开发 b = append([]T(nil), a...) ``` - 编程语言与开发 b = make([]T, len(a)) copy(b, a) cut删除一段范围i\~j =================== ``` - 编程语言与开发 copy(a[i:], a[j:]) for</description>
    </item>
    
    <item>
      <title>GolanggRPC实践连载一gRPC介绍与安装</title>
      <link>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-yi--grpcjie-shao-yu-an-zhuang.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:41 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-yi--grpcjie-shao-yu-an-zhuang.html</guid>
      <description>gRPC介绍与安装 A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. ——gRPC Website gRPC 是一个高性能、开源、通用的RPC框架，由Google推出，基于HTTP/2协议</description>
    </item>
    
    <item>
      <title>GolanggRPC实践连载三Protobuf语法</title>
      <link>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-san--protobufyu-fa.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:40 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-san--protobufyu-fa.html</guid>
      <description>Protobuf语法 gRPC推荐使用proto3，本节只介绍常用语法，更多高级使用姿势请参考官方文档 Message定义 一个message类型</description>
    </item>
    
    <item>
      <title>GolanggRPC实践连载二HellogRPC</title>
      <link>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-er--hello-grpc.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:40 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-er--hello-grpc.html</guid>
      <description>Hello gRPC 按照惯例，这里从一个Hello项目开始，本项目定义了一个Hello Service，客户端发送包含字符串名字的请求，服务端返回Hello消</description>
    </item>
    
    <item>
      <title>GolanggRPC实践连载四gRPC认证</title>
      <link>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-si--grpcren-zheng.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:39 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-si--grpcren-zheng.html</guid>
      <description>gRPC 默认提供了两种认证方式： 基于SSL/TLS认证方式 远程调用认证方式 两种方式可以混合使用 TLS认证示例 这里直接扩展hello项目，实现TLS</description>
    </item>
    
    <item>
      <title>GolanggRPC实践连载五拦截器Interceptor</title>
      <link>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-wu--lan-jie-qi--interceptor.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:37 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-wu--lan-jie-qi--interceptor.html</guid>
      <description>Interceptor grpc服务端提供了interceptor功能，可以在服务端接收到请求时优先对请求中的数据做一些处理后再转交给指定的服务处理并响应，功能类</description>
    </item>
    
    <item>
      <title>基于Golang的IP地址信息查询服务</title>
      <link>https://yushuangqi.com/blog/2016/ji-yu-golangde-ipde-zhi-xin-xi-cha-xun-fu-wu.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:33 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/ji-yu-golangde-ipde-zhi-xin-xi-cha-xun-fu-wu.html</guid>
      <description>原文链接：http://tabalt.net/blog/ipquer&amp;hellip; 工作中经常会有通过IP匹配用户信息的需求，如确定用户所在</description>
    </item>
    
    <item>
      <title>GolanggRPC实践连载六内置Trace</title>
      <link>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-liu--nei-zhi-trace.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:30 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-liu--nei-zhi-trace.html</guid>
      <description>内置Trace grpc默认提供了客户端和服务端的trace日志，可惜没有提供自定义接口，当前只能查看基本的事件日志和请求日志，对于基本的请求</description>
    </item>
    
    <item>
      <title>GolanggRPC实践连载七HTTP协议转换</title>
      <link>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-qi--httpxie-yi-zhuai-huan.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:29 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-grpcshi-jian--lian-zai-qi--httpxie-yi-zhuai-huan.html</guid>
      <description>gRPC HTTP协议转换 正当有这个需求的时候，就看到了这个实现姿势。源自coreos的一篇博客，转载到了grpc官方博客gRPC with REST and Open APIs。</description>
    </item>
    
  </channel>
</rss>